module Asset where 

import DA.Set as Set

data AssetType = AssetType with 
    issuer: Party 
    symbol: Text 
    fungible: Bool -- true means able to split and merge
    reference: Optional Text 
  deriving (Eq, Show) 

template Asset with 
    assetType: AssetType 
    owner: Party 
    amount: Decimal 
    observers: Set Party
  where 
    signatory assetType.issuer, owner 
    observer observers 
    ensure (if assetType.fungible then amount > 0.0 else amount == 1.0)
    -- determined by amount so can't use key?

template AssetTransfer with 
    asset: Asset 
    receiver: Party 
  where 
    -- need issuer authority (using AssetHoldingAccount)
    signatory (signatory asset) 
    observer receiver 
    -- ensure cannot create AssetTransfer that can't be transfered or rolled back?
    ensure (if asset.assetType.fungible then asset.amount > 0.0 else asset.amount == 1.0)

    choice Cancel_Transfer: ContractId Asset 
      controller asset.owner 
      do 
        create asset 
    choice Reject_Transfer: ContractId Asset 
      controller receiver 
      do 
        create asset 
    choice Accept_Transfer: ContractId Asset 
    -- issuer authority so receiver needs AssetHoldingAccount to accept
      controller receiver, asset.assetType.issuer 
      do 
        create asset with 
          owner = receiver 
          observers = Set.empty 
      

template BankAsset with 
    assetType: AssetType 
    owner: Party 
    amount: Decimal 
    observers: Set Party 
  where 
    signatory assetType.issuer 
    observer owner, observers 
    ensure (if assetType.fungible then amount > 0.0 else amount == 1.0) 

    -- choice Archive: () 
    --   controller assetType.issuer 
    --   do 
    --     assertMsg "asset must belong to issuer before being destroyed" (assetType.issuer == owner)
    --     return ()

template BankAccount with 
    assetType: AssetType 
    owner: Party 
  where 
    signatory assetType.issuer 
    observer owner 
    key (assetType, owner): (AssetType, Party)
    maintainer key._1.issuer  

    choice Transfer: ContractId BankAsset with 
        assetCid: ContractId BankAsset 
        newOwner: Party 
      controller owner 
      do 
        asset <- fetch assetCid 
        assertMsg ("asset must be the same type") (asset.assetType == assetType)
        assertMsg ("asset must have the same owner") (asset.owner == owner)
        create asset with owner = newOwner 

    -- choice Archive: () 
    --   controller owner  
    --   do 
    --     return ()
